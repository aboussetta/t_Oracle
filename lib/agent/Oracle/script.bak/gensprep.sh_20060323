#!/bin/sh
#
# This procedure execute Oracle statspack snap and report.
#

LANG=C;export LANG
COLUMNS=160;export COLUMNS
#resize -s 100 160
CMDNAME=`basename $0`
USAGE="Usage: $CMDNAME [-s] [-p] [-c category] [-i sid] [-l dir] [-e errfile]"

# Set default param
CWD=`dirname $0`
MODE="NOTRUNSNAP"
PURGE="NO"
CATEGORY="ORACLE"
DIR=.
SID=RTD
ERR=/dev/null

# Get command option
OPT=
while getopts spc:l:i:e: OPT
do
        case $OPT in
        s)      MODE="RUNSNAP"
                ;;
        p)      PURGE="YES"
                ;;
        l)      DIR=$OPTARG
                ;;
        i)      SID=$OPTARG
                ;;
        c)      CATEGORY=$OPTARG
                ;;
        e)      ERR=$OPTARG
                ;;
        \?)     echo "$USAGE" 1>&2
                exit 1
                ;;
        esac
done
shift `expr $OPTIND - 1`

# Set current Date & Time
WORK="${CWD}/../_wk"

if [ ! -d ${WORK} ]; then
    /bin/mkdir -p ${WORK}
    if [ $? -ne 0 ]; then
        echo "Command failed."
        exit 1
    fi
fi

# --------- Oracle 環境変数設定 --------------
. ${CWD}/oracle_env

# Check Oracle process
ORACLE_SID=${SID}; export ORACLE_SID
/bin/ps -ef | grep ora_smon_${SID} > ${WORK}/ora_ps_${CATEGORY}_${SID}
ORAPROC=`perl -ne 'print $1 if ($_=~/ora_smon_(.*)/ && $_!=~/grep/);' ${WORK}/ora_ps_${CATEGORY}_${SID}` 
if [ "${ORACLE_SID}" != "${ORAPROC}" ]; then
    echo "ORACLE(${ORACLE_SID}) not found."
    exit 1
fi

# Execute snap of statspack
if [ "RUNSNAP" = "${MODE}" ]; then
    sqlplus perfstat/perfstat << EOF1 > $ERR 2>&1
    exec statspack.snap(i_snap_level=>7);
EOF1
fi

# Get newest snap_id form statspack
sqlplus perfstat/perfstat << EOF2 > $ERR 2>&1
spool ${WORK}/new_id_list_${CATEGORY}_${SID}
select 'NEWEST_SNAPID '||max(snap_id)||' '||min(snap_id) snap_id from stats\$snapshot;
spool off
EOF2
perl -ne 'print $1 if /^NEWEST_SNAPID (\d+) (\d+)/' ${WORK}/new_id_list_${CATEGORY}_${SID}.lst > ${WORK}/newid_${CATEGORY}_${SID}
perl -ne 'print $2 if /^NEWEST_SNAPID (\d+) (\d+)/' ${WORK}/new_id_list_${CATEGORY}_${SID}.lst > ${WORK}/oldestid_${CATEGORY}_${SID}

# Check new and old Snapshot id
if [ -f ${WORK}/newid_${CATEGORY}_${SID} ]; then
    NEW_ID=`cat ${WORK}/newid_${CATEGORY}_${SID}`
else
    echo "${WORK}/newid_${CATEGORY}_${SID} not found."
    exit 1
fi
if [ -f ${WORK}/oldestid_${CATEGORY}_${SID} ]; then
    OLDEST_ID=`cat ${WORK}/oldestid_${CATEGORY}_${SID}`
else
    echo "${WORK}/oldestid_${CATEGORY}_${SID} not found."
    exit 1
fi
if [ -f ${WORK}/oldid_${CATEGORY}_${SID} ]; then
    OLD_ID=`cat ${WORK}/oldid_${CATEGORY}_${SID}`
else
    echo "${WORK}/oldid_${CATEGORY}_ not found."
    /bin/cp -p ${WORK}/newid_${CATEGORY}_${SID} ${WORK}/oldid_${CATEGORY}_${SID}
    exit 1
fi
if [ "${NEW_ID}" = "${OLD_ID}" ]; then
    echo "No newest snapshot."
    exit 1
fi

# Report statspack
{
cd ${CWD}
sqlplus perfstat/perfstat << EOF > $ERR 2>&1
define begin_snap=${OLD_ID}
define end_snap=${NEW_ID}
define report_name=${DIR}/spreport_${SID}
@spreport
EOF
}

# Copy to old snap_id
/bin/cp -p ${WORK}/newid_${CATEGORY}_${SID} ${WORK}/oldid_${CATEGORY}_${SID}

# Purge snapshot
if [ "NO" = "${PURGE}" ]; then
    exit 0
fi

# Get old snap_id form statspack
sqlplus perfstat/perfstat << EOF2 > $ERR 2>&1
spool ${WORK}/snapid.$$
select 'SNAPID '||max(snap_id) snap_id from stats\$snapshot where snap_id < ${OLD_ID};
spool off
EOF2
OLD_ID=`perl -ne 'print $1 if /^SNAPID (\d+)/' ${WORK}/snapid.$$`
/bin/rm -f ${WORK}/snapid.$$

if [ "${OLDEST_ID}" -gt "${OLD_ID}" ]; then
    echo "No target of purge snapshot."
    exit 1
fi
{
cd ${CWD}
#sqlplus perfstat/perfstat << EOF > $ERR 2>&1
sqlplus perfstat/perfstat << EOF > ${WORK}/sppurge.txt 2>&1
define losnapid=${OLDEST_ID}
define hisnapid=${OLD_ID}
@sppurge
EOF
}

exit 0
